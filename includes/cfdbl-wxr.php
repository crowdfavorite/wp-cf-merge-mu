<?php

if(!function_exists('wxr_missing_parents')) {
	function wxr_missing_parents($categories) {
		if ( !is_array($categories) || empty($categories) )
			return array();
	
		foreach ( $categories as $category )
			$parents[$category->term_id] = $category->parent;
	
		$parents = array_unique(array_diff($parents, array_keys($parents)));
	
		if ( $zero = array_search('0', $parents) )
			unset($parents[$zero]);
	
		return $parents;
	}
}

if(!function_exists('wxr_cdata')) {
	function wxr_cdata($str) {
		if ( seems_utf8($str) == false )
			$str = utf8_encode($str);
	
		// $str = ent2ncr(wp_specialchars($str));
	
		$str = "<![CDATA[$str" . ( ( substr($str, -1) == ']' ) ? ' ' : '') . "]]>";
	
		return $str;
	}
}

if(!function_exists('wxr_site_url')) {
	function wxr_site_url() {
		global $current_site;
	
		// mu: the base url
		if ( isset($current_site->domain) ) {
			return 'http://'.$current_site->domain.$current_site->path;
		}
		// wp: the blog url
		else {
			return get_bloginfo_rss('url');
		}
	}
}

if(!function_exists('get_wxr_cat_name')) {
	function get_wxr_cat_name($c) {
		if ( empty($c->name) )
			return;
	
		return '<wp:cat_name>' . wxr_cdata($c->name) . '</wp:cat_name>';
	}
}

if(!function_exists('get_wxr_category_description')) {
	function get_wxr_category_description($c) {
		if ( empty($c->description) )
			return;
	
		return '<wp:category_description>' . wxr_cdata($c->description) . '</wp:category_description>';
	}
}

if(!function_exists('get_wxr_tag_name')) {
	function get_wxr_tag_name($t) {
		if ( empty($t->name) )
			return;
	
		return '<wp:tag_name>' . wxr_cdata($t->name) . '</wp:tag_name>';
	}
}

if(!function_exists('get_wxr_tag_description')) {
	function get_wxr_tag_description($t) {
		if ( empty($t->description) )
			return;
	
		return '<wp:tag_description>' . wxr_cdata($t->description) . '</wp:tag_description>';
	}
}

if(!function_exists('get_wxr_post_taxonomy')) {
	function get_wxr_post_taxonomy() {
		$categories = get_the_category();
		$tags = get_the_tags();
		$the_list = '';
		$filter = 'rss';
	
		if ( !empty($categories) ) foreach ( (array) $categories as $category ) {
			$cat_name = sanitize_term_field('name', $category->name, $category->term_id, 'category', $filter);
			// for backwards compatibility
			$the_list .= "\n\t\t<category><![CDATA[$cat_name]]></category>\n";
			// forwards compatibility: use a unique identifier for each cat to avoid clashes
			// http://trac.wordpress.org/ticket/5447
			$the_list .= "\n\t\t<category domain=\"category\" nicename=\"{$category->slug}\"><![CDATA[$cat_name]]></category>\n";
		}
	
		if ( !empty($tags) ) foreach ( (array) $tags as $tag ) {
			$tag_name = sanitize_term_field('name', $tag->name, $tag->term_id, 'post_tag', $filter);
			$the_list .= "\n\t\t<category domain=\"tag\"><![CDATA[$tag_name]]></category>\n";
			// forwards compatibility as above
			$the_list .= "\n\t\t<category domain=\"tag\" nicename=\"{$tag->slug}\"><![CDATA[$tag_name]]></category>\n";
		}
	
		return $the_list;
	}
}

function cfdbl_export($post_ids) {
	global $wpdb, $post, $current_user;
	// version number for the export format.  bump this when something changes that might affect compatibility.

	define('WXR_VERSION', '1.0');
	
	do_action('cfdbl_export');
	
	$file_author = $current_user->id;

	$exported_posts .= '
	<?xml version="1.0" encoding="' . get_bloginfo('charset') . '"?>
	<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your blog. -->
	<!-- It contains information about your blog\'s posts, comments, and categories. -->
	<!-- You may use this file to transfer that content from one site to another. -->
	<!-- This file is not intended to serve as a complete backup of your blog. -->
	
	<!-- To import this information into a WordPress blog follow these steps. -->
	<!-- 1. Log into that blog as an administrator. -->
	<!-- 2. Go to Manage: Import in the blog\'s admin panels. -->
	<!-- 3. Choose "WordPress" from the list. -->
	<!-- 4. Upload this file using the form provided on that page. -->
	<!-- 5. You will first be asked to map the authors in this export file to users -->
	<!--    on the blog.  For each author, you may choose to map to an -->
	<!--    existing user on the blog or to create a new user -->
	<!-- 6. WordPress will then import each of the posts, comments, and categories -->
	<!--    contained in this file into your blog -->
	
	<rss version="2.0"
		xmlns:content="http://purl.org/rss/1.0/modules/content/"
		xmlns:wfw="http://wellformedweb.org/CommentAPI/"
		xmlns:dc="http://purl.org/dc/elements/1.1/"
		xmlns:wp="http://wordpress.org/export/'.WXR_VERSION.'/"
	>
	
	<channel>
		<title>'.get_bloginfo_rss('name').'</title>
		<link>'.get_bloginfo_rss('url').'</link>
		<description>'.get_bloginfo_rss("description").'</description>
		<pubDate>'.mysql2date('D, d M Y H:i:s +0000', get_lastpostmodified('GMT'), false).'</pubDate>
		<generator>http://wordpress.org/?v='.get_bloginfo_rss('version').'</generator>
		<language>'.get_option('rss_language').'</language>
		<wp:wxr_version>'.WXR_VERSION.'</wp:wxr_version>
		<wp:base_site_url>'.wxr_site_url().'</wp:base_site_url>
		<wp:base_blog_url>'.get_bloginfo_rss('url').'</wp:base_blog_url>
	';
	// do_action('rss2_head');
	if ($post_ids) {
		global $wp_query;
		$wp_query->in_the_loop = true;  // Fake being in the loop.
		// fetch 20 posts at a time rather than loading the entire table into memory
		while ( $next_posts = array_splice($post_ids, 0, 20) ) {
			$where = "WHERE ID IN (".join(',', $next_posts).")";
			$posts = $wpdb->get_results("SELECT * FROM $wpdb->posts $where ORDER BY post_date_gmt ASC");
			foreach ($posts as $post) {
				setup_postdata($post);
				global $authordata;
				$exported_posts .= '
					<item>
						<title>'.apply_filters('the_title_rss', $post->post_title).'</title>
						<link>'.get_permalink().'</link>
						<pubDate>'.mysql2date('D, d M Y H:i:s +0000', get_post_time('Y-m-d H:i:s', true), false).'</pubDate>
						<dc:creator>'.wxr_cdata($authordata->ID).'</dc:creator>
						'.get_wxr_post_taxonomy().'
						';
						if ($post->post_type == 'post') {
							$exported_posts .= apply_filters('cfdbl-export-taxonomy', '', $post->ID);
							
						}
						$exported_posts .= '
						
						<guid isPermaLink="false">'.get_the_guid().'</guid>
						<description></description>
						<content:encoded>'.wxr_cdata( apply_filters('the_content_export', $post->post_content) ).'</content:encoded>
						<excerpt:encoded>'.wxr_cdata( apply_filters('the_excerpt_export', $post->post_excerpt) ).'</excerpt:encoded>
						<wp:post_id>'.$post->ID.'</wp:post_id>
						<wp:post_date>'.$post->post_date.'</wp:post_date>
						<wp:post_date_gmt>'.$post->post_date_gmt.'</wp:post_date_gmt>
						<wp:comment_status>'.$post->comment_status.'</wp:comment_status>
						<wp:ping_status>'.$post->ping_status.'</wp:ping_status>
						<wp:post_name>'.$post->post_name.'</wp:post_name>
						<wp:status>'.$post->post_status.'</wp:status>
						<wp:post_parent>'.$post->post_parent.'</wp:post_parent>
						<wp:menu_order>'.$post->menu_order.'</wp:menu_order>
						<wp:post_type>'.$post->post_type.'</wp:post_type>
						<wp:post_password>'.$post->post_password.'</wp:post_password>
						
				';
				if ($post->post_type == 'attachment') {
					$exported_posts .= '
						<wp:attachment_url>'.wp_get_attachment_url($post->ID).'</wp:attachment_url>
						
					';
				}
				$postmeta = $wpdb->get_results( $wpdb->prepare("SELECT * FROM $wpdb->postmeta WHERE post_id = %d", $post->ID) );
				if ( $postmeta ) {
					foreach( $postmeta as $meta ) {
						$exported_posts .= '
						<wp:postmeta>
							<wp:meta_key>'.$meta->meta_key.'</wp:meta_key>
							<wp:meta_value>'.wxr_cdata($meta->meta_value).'</wp:meta_value>
						</wp:postmeta>
						
						';
					}
				}

				$comments = $wpdb->get_results( $wpdb->prepare("SELECT * FROM $wpdb->comments WHERE comment_post_ID = %d", $post->ID) );
				if ( $comments ) { 
					foreach ( $comments as $c ) {
						$exported_posts .= '
						<wp:comment>
							<wp:comment_id>'.$c->comment_ID.'</wp:comment_id>
							<wp:comment_author>'.wxr_cdata($c->comment_author).'</wp:comment_author>
							<wp:comment_author_email>'.$c->comment_author_email.'</wp:comment_author_email>
							<wp:comment_author_url>'.$c->comment_author_url.'</wp:comment_author_url>
							<wp:comment_author_IP>'.$c->comment_author_IP.'</wp:comment_author_IP>
							<wp:comment_date>'.$c->comment_date.'</wp:comment_date>
							<wp:comment_date_gmt>'.$c->comment_date_gmt.'</wp:comment_date_gmt>
							<wp:comment_content>'.wxr_cdata($c->comment_content).'</wp:comment_content>
							<wp:comment_approved>'.$c->comment_approved.'</wp:comment_approved>
							<wp:comment_type>'.$c->comment_type.'</wp:comment_type>
							<wp:comment_parent>'.$c->comment_parent.'</wp:comment_parent>
							<wp:comment_user_id>'.$c->user_id.'</wp:comment_user_id>
						</wp:comment>
						
						';
					} 
				}
				$exported_posts .= '
					</item>
				';
			} 
		}
		$exported_posts .= '
			</channel>
		</rss>
		';
	}
	
	return $exported_posts;
}
?>